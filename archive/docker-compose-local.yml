# Docker Compose configuration for Esoteric Vectors application
# Production-ready setup with nginx reverse proxy, backend API, and persistent data
# Domain: mystical-mentor.beautiful-apps.com

version: '3.8'

services:
  # Backend FastAPI application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: esoteric-backend
    restart: unless-stopped
    environment:
      # Application settings
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      
      # API settings
      - API_HOST=0.0.0.0
      - API_PORT=8001
      
      # Auth0 settings (from environment)
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      
      # Stripe settings (from environment)
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      
      # Application URLs (updated for your domain)
      - FRONTEND_URL=${FRONTEND_URL:-https://mystical-mentor.beautiful-apps.com}
      - BACKEND_URL=${BACKEND_URL:-https://mystical-mentor.beautiful-apps.com/api}
      
      # Database and storage paths
      - DATA_PATH=/app/data
      - CHROMA_DB_PATH=/app/data/chroma_db
      - SESSIONS_PATH=/app/data/sessions
      - QA_CACHE_PATH=/app/data/qa
      
    volumes:
      # Persistent data storage
      - app_data:/app/data
      - app_logs:/app/logs
      
      # SSL certificates (if using custom certs)
      - ./ssl:/app/ssl:ro
      
      # Configuration files
      - ./.env:/app/.env:ro
      
    ports:
      - "8001:8001"
    
    networks:
      - esoteric_network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Remove nginx dependency to avoid circular dependency
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx reverse proxy and static file server
  nginx:
    image: nginx:alpine
    container_name: esoteric-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      # Nginx configuration
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      
      # SSL certificates (updated paths for your domain)
      - ./ssl:/etc/nginx/ssl:ro
      
      # Static web files
      - ./web:/usr/share/nginx/html/web
      
      # Nginx logs
      - nginx_logs:/var/log/nginx
    
    networks:
      - esoteric_network
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'

# Named volumes for persistent data
volumes:
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  nginx_logs:
    driver: local

# Custom network for service communication
networks:
  esoteric_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 